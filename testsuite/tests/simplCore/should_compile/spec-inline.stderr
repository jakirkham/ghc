
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 179, types: 83, coercions: 0}

-- RHS size: {terms: 1, types: 0, coercions: 0}
Roman.$trModule2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
Roman.$trModule2 = GHC.Types.TrNameS ["main"#]

-- RHS size: {terms: 1, types: 0, coercions: 0}
Roman.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
Roman.$trModule1 = GHC.Types.TrNameS ["Roman"#]

-- RHS size: {terms: 2, types: 0, coercions: 0}
Roman.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Roman.$trModule =
  GHC.Types.Module [Roman.$trModule2, Roman.$trModule1]

-- RHS size: {terms: 1, types: 0, coercions: 0}
Roman.foo4 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.foo4 = GHC.Types.I# [10#]

-- RHS size: {terms: 1, types: 1, coercions: 0}
Roman.foo3 :: Maybe Int
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.foo3 = Just [@ Int, Roman.foo4]

-- RHS size: {terms: 2, types: 2, coercions: 0}
Roman.foo5 :: Int
[GblId, Str=x]
Roman.foo5 =
  Control.Exception.Base.patError
    @ 'GHC.Types.PtrRepLifted
    @ Int
    "spec-inline.hs:(19,5)-(29,25)|function go"#

Rec {
-- RHS size: {terms: 65, types: 18, coercions: 0}
Roman.foo_$s$wgo1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> Maybe Int -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,1*U>]
Roman.foo_$s$wgo1 =
  \ (sc :: GHC.Prim.Int#) (sc1 :: Maybe Int) ->
    let {
      m :: GHC.Prim.Int#
      [LclId]
      m =
        GHC.Prim.+#
          (GHC.Prim.+#
             (GHC.Prim.+#
                (GHC.Prim.+# (GHC.Prim.+# (GHC.Prim.+# sc sc) sc) sc) sc)
             sc)
          sc } in
    case sc1 of {
      Nothing -> Roman.foo_$s$wgo1 m Roman.foo3;
      Just n ->
        case n of { GHC.Types.I# x ->
        case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# x 0#) of {
          False ->
            case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# x 100#) of {
              False ->
                case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# x 500#) of {
                  False ->
                    Roman.foo_$s$wgo1
                      (GHC.Prim.+# m m)
                      (Just [@ Int, (GHC.Types.I# [(GHC.Prim.-# x 1#)])]);
                  True ->
                    Roman.foo_$s$wgo1
                      m (Just [@ Int, (GHC.Types.I# [(GHC.Prim.-# x 3#)])])
                };
              True ->
                Roman.foo_$s$wgo1
                  sc (Just [@ Int, (GHC.Types.I# [(GHC.Prim.-# x 2#)])])
            };
          True -> 0#
        }
        }
    }
end Rec }

-- RHS size: {terms: 74, types: 25, coercions: 0}
Roman.$wgo [InlPrag=[0]] :: Maybe Int -> Maybe Int -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 30] 316 0}]
Roman.$wgo =
  \ (w :: Maybe Int) (w1 :: Maybe Int) ->
    case w1 of {
      Nothing -> case Roman.foo5 of wild1 { };
      Just x ->
        case x of { GHC.Types.I# ipv ->
        let {
          m :: GHC.Prim.Int#
          [LclId]
          m =
            GHC.Prim.+#
              (GHC.Prim.+#
                 (GHC.Prim.+#
                    (GHC.Prim.+# (GHC.Prim.+# (GHC.Prim.+# ipv ipv) ipv) ipv) ipv)
                 ipv)
              ipv } in
        case w of {
          Nothing -> Roman.foo_$s$wgo1 m Roman.foo3;
          Just n ->
            case n of { GHC.Types.I# x2 ->
            case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# x2 0#) of {
              False ->
                case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# x2 100#) of {
                  False ->
                    case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# x2 500#) of {
                      False ->
                        Roman.foo_$s$wgo1
                          (GHC.Prim.+# m m)
                          (Just [@ Int, (GHC.Types.I# [(GHC.Prim.-# x2 1#)])]);
                      True ->
                        Roman.foo_$s$wgo1
                          m (Just [@ Int, (GHC.Types.I# [(GHC.Prim.-# x2 3#)])])
                    };
                  True ->
                    Roman.foo_$s$wgo1
                      ipv (Just [@ Int, (GHC.Types.I# [(GHC.Prim.-# x2 2#)])])
                };
              True -> 0#
            }
            }
        }
        }
    }

-- RHS size: {terms: 8, types: 5, coercions: 0}
Roman.foo_go [InlPrag=INLINE[0]] :: Maybe Int -> Maybe Int -> Int
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w [Occ=Once] :: Maybe Int) (w1 [Occ=Once] :: Maybe Int) ->
                 case Roman.$wgo w w1 of ww { __DEFAULT -> GHC.Types.I# [ww] }}]
Roman.foo_go =
  \ (w :: Maybe Int) (w1 :: Maybe Int) ->
    case Roman.$wgo w w1 of ww { __DEFAULT -> GHC.Types.I# [ww] }

-- RHS size: {terms: 1, types: 0, coercions: 0}
Roman.foo2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.foo2 = GHC.Types.I# [6#]

-- RHS size: {terms: 1, types: 1, coercions: 0}
Roman.foo1 :: Maybe Int
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.foo1 = Just [@ Int, Roman.foo2]

-- RHS size: {terms: 10, types: 5, coercions: 0}
foo :: Int -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n [Occ=Once!] :: Int) ->
                 case n of n1 { GHC.Types.I# _ [Occ=Dead] ->
                 Roman.foo_go (Just [@ Int, n1]) Roman.foo1
                 }}]
foo =
  \ (n :: Int) ->
    case n of n1 { GHC.Types.I# ipv ->
    case Roman.foo_$s$wgo1 6# (Just [@ Int, n1]) of ww { __DEFAULT ->
    GHC.Types.I# [ww]
    }
    }


------ Local rules for imported ids --------
"SC:$wgo0" [0]
    forall (sc :: GHC.Prim.Int#) (sc1 :: Maybe Int).
      Roman.$wgo sc1 (Just [@ Int, (GHC.Types.I# [sc])])
      = Roman.foo_$s$wgo1 sc sc1


